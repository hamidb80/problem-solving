ParseInput ← ≡(=@1 °□ ⊢) regex "\\d+"
ParseBinary ← /+ ≡× ⁿ:2 ⇡⧻ .⇌
CommonBit ← ≥0.5÷⧻⟜/+
PartOne ← × ⊃(ParseBinary|ParseBinary =0) ≡CommonBit ⍉

SelectCommonBitForIndex ← (
  ?
  ## 0 1 2 3 4 
  ⊙(⍉..)
  # ?
  ⟜⊏
  # ?
  :
  ## [0 1 1 1 1 0 0 1 1 1 0 0] [1 0 0 0 1 0 1] [1 1 1 0] [1 1 0] [0 1] 
  CommonBit
  ## 1 0 1 1 1 
  # ?
  ## 1 0 1 1 1 
  ⊃(⋅∘|⋅⋅∘|∘)
  ## 0 1 2 3 4 
  ≡(= ⊏)
  ## [0 1 1 1 1 0 0 1 1 1 0 0] [0 1 1 1 0 1 0] [1 1 1 0] [1 1 0] [0 1] 
  ⊚
  ## [1 2 3 4 7 8 9] [1 2 3 5] [0 1 2] [0 1] [1] 
  ⊏
  ## ╭─            ╭─            ╭─            ╭─            ╭─            
  ## ╷ 1 1 1 1 0   ╷ 1 0 1 1 0   ╷ 1 0 1 1 0   ╷ 1 0 1 1 0   ╷ 1 0 1 1 1   
  ##   1 0 1 1 0     1 0 1 1 1     1 0 1 1 1     1 0 1 1 1               ╯ 
  ##   1 0 1 1 1     1 0 1 0 1     1 0 1 0 1               ╯ 
  ##   1 0 1 0 1     1 0 0 0 0               ╯               
  ##   1 1 1 0 0               ╯                             
  ##   1 0 0 0 0                                             
  ##   1 1 0 0 1                                             
  ##             ╯                                           
)

SelectCommonBitForIndexState ← (
  ⟜SelectCommonBitForIndex
  +1
)

PartTwo ← (
  ⍢(SelectCommonBitForIndexState|≠1 ⧻ ⋅∘) 0 ∘
)

# ---------------------------------

$ 00100
$ 11110
$ 10110
$ 10111
$ 10101
$ 01111
$ 00111
$ 11100
$ 10000
$ 11001
$ 00010
$ 01010

# &fras "./input.txt"

ParseInput
⊃PartOne PartTwo
